cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#uncomment if you have defined messages
#rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

SET(IMUSBG_SRCS
	#binaries
	src/binaryLogs/binaryLogs.c
	src/binaryLogs/binaryLogDvl.c
	src/binaryLogs/binaryLogEkf.c
	src/binaryLogs/binaryLogGps.c
	src/binaryLogs/binaryLogImu.c
	src/binaryLogs/binaryLogMag.c
	src/binaryLogs/binaryLogUtc.c
	src/binaryLogs/binaryLogUsbl.c
	src/binaryLogs/binaryLogDebug.c
	src/binaryLogs/binaryLogEvent.c
	src/binaryLogs/binaryLogStatus.c
	src/binaryLogs/binaryLogOdometer.c
	src/binaryLogs/binaryLogPressure.c
	src/binaryLogs/binaryLogShipMotion.c

	#commands
	src/commands/commands.c
	src/commands/commandsMag.c
	src/commands/commandsOdo.c
	src/commands/commandsGnss.c
	src/commands/commandsInfo.c
	src/commands/commandsEvent.c
	src/commands/commandsCommon.c
	src/commands/commandsOutput.c
	src/commands/commandsSensor.c
	src/commands/commandsAdvanced.c
	src/commands/commandsSettings.c
	src/commands/commandsInterface.c

	#interface
	src/interfaces/interface.c
	src/interfaces/interfaceUdp.c
	src/interfaces/interfaceFile.c
	src/interfaces/interfaceSerialUnix.c

	#misc
	src/misc/sbgCrc.c
	src/misc/transfer.c

	#protocol
	src/protocol/protocol.c

	#time
	src/time/sbgTime.c
	
	#sbgECom
	src/sbgECom.c
)

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
rosbuild_add_executable(imuSbg_node src/ellipseMinimal.cpp ${IMUSBG_SRCS})
#target_link_libraries(example ${PROJECT_NAME})
